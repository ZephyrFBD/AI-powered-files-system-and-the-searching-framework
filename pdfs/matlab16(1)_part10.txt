，
第一个输出和学习速率为0 时一样。
由于权
重已更新，第二个输出就不一样了。每计算一次错误，权重都不断的修改。如果网络可行并
且学习速率设置得当，错误将不断的趋向于0。 
  动态网络中的增加方式 
  我们同样也能用增加方式训练动态网络。实际上，这是最普遍的情况。让我们用前面用
过的那个有输入延迟的线性网络作为例子，我们将初始化权重为0，并把学习速率设为0.1。
 
  net = newlin([-1 1],1,[0 1],0.1); 
  net.IW{1,1} = [0 0]; 
  net.biasConnect = 0; 
  为了用增加方式，我们把输入和目标输出表示为细胞数组的元素： 
  Pi = {1}; 
  P = {2 3 4}; 
  T = {3 5 7}; 
  这里我们尝试训练网络把当前输入和前一次输入加起来作为当前输出。
输入序列和我们
以前使用sim 的例子中用过的一样，除了我们指定了输入序列的第一组作为延迟的初始状
态。现在我们可以用adapt 来训练网络了： 
  [net,a,e,pf] = adapt(net,P,T,Pi); 
  a = [0] [2.4] [ 7.98] 
  e = [3] [2.6] [-1.98] 
  由于权重没有更新，第一个输出是0。每一个序列步进，权重都改变一次。 
  批处理方式 
  在批处理方式中，仅仅当所有的输入数据都被提交以后，网络权重和偏置才被更新，它
也可以应用于静态和动态网络。我们将在这一节讨论这两种类型。 
静态网络中的批处理方式 
  批处理方式可以用adapt或train函数来实现，虽然由于由于采用了更高效的学习算法，
train通常是最好的选择。增加方式只能用adapt来实现，train函数只能用于批处理方式。 
  让我们用前面用过的静态网络的例子开始，学习速率设置为0.1。 
  net = newlin([-1 1;-1 1],1,0,0.1); 
  net.IW{1,1} = [0 0]; 
  net.b{1} = 0; 
  用adapt函数实现静态网络的批处理方式，输入向量必须用同步向量矩阵的方式放置： 
  P = [1 2 2 3; 2 1 3 1]; 
  T = [4 5 7 7]; 
  当我们调用adapt时将触发adaptwb函数，