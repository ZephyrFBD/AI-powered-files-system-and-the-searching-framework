，我们得到： 
  A = sim(net,P) 
  A = 
  1 2 3 4 
  这个结果和我们同时把每一个输入应用到单独的网络中并计算单独的输出没什么两样。
注意如果我们没有初始化延迟时间，那么缺省值就是0。在这个例子中，由于当前输入的权
重是1，输出就是输入乘1。在某些特定的情况下，我们可能想要在同一时间模拟一些不同
序列的网络响应。这种情况我们就要给网络输入一组同步序列。比如说，我们要把下面两个
序列输入网络： 
  p(1)=[1], p(2)=[2],p(3)=[3], p(4)=[4] 
  p(1)=[4], p(2)=[3],p(3)=[2], p(4)=[1] 
  输入P 应该是一个细胞数组，每一个数组元素都包含了两个同时发生的序列的元素。 
  P = {[1 4] [2 3] [3 2] [4 1]}; 
  现在我们就可以模拟这个网络了： 
  A = sim(net,P); 
  网络输出结果将是： 
  A = {[ 1 4] [4 11] [7 8] [10 5]} 
  你可以看到，
每个矩阵的第一列是由第一组输入序列产生的输出序列，
每个矩阵的第二
列是由第二组输入序列产生的输出序列。
这两组序列之间没有关联，
好象他们是同时应用在
单个的并行网络上的。 
  下面的图表显示了当我们有Q 个TS 长度的序列时，在函数sim 中输入P 的一般格式。
它函盖了单输入向量的所有的情况。
每一个细胞数组的元素都是一个同步向量矩阵，
它对应
于每一个序列的同一时间点。如果有多输入向量，那么在细胞数组中的矩阵里就有多行。 
 
  
  
  这一节我们我们把同步和异步输入应用到了动态网络中。
在以前的章节中我们把同步输
入应用到了静态网络中。
我们也能把异步序列应用到静态网络中。
这不会改变网络的输出响
应，但是这会影响训练过的网络的形式。在下一节你会更清楚的了解这一点。 
 
  5．训练方式 
  在这一节中，我们将描述两种不同的训练方式。在增加方式中，每提交一次输入数据，
网络权重和偏置都更新一次。在批处理方式中，仅仅当所有的输入数据都被提交以后，网络
权重和偏置才被更新。 
  增加方式（应用与自适应网络和其他网络） 
  虽然增加方式更普遍的应用于动态网络，
比如自适应滤波，
但是在静态和动态网络中都
可以应用它。 
在